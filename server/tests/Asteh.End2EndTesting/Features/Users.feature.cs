// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Asteh.End2EndTesting.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UsersFeature : object, Xunit.IClassFixture<UsersFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Users.feature"
#line hidden
        
        public UsersFeature(UsersFeature.FixtureData fixtureData, Asteh_End2EndTesting_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Users", "\tAs a valid Platform user\r\n\tI want to request users list for CRUD operations\r\n\tSo" +
                    " that I could see users list, filter it and make another operations", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "AllowEdit"});
            table1.AddRow(new string[] {
                        "1",
                        "Пользователь",
                        "false"});
            table1.AddRow(new string[] {
                        "2",
                        "Администратор",
                        "true"});
            table1.AddRow(new string[] {
                        "3",
                        "Модератор",
                        "true"});
            table1.AddRow(new string[] {
                        "4",
                        "Тестировщик",
                        "false"});
            table1.AddRow(new string[] {
                        "5",
                        "Гость",
                        "false"});
#line 7
 testRunner.Given("the following userTypes exists in the storage", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "TypeName",
                        "Login",
                        "Password",
                        "Name"});
            table2.AddRow(new string[] {
                        "1",
                        "Администратор",
                        "Admin1Login",
                        "Admin1Pass",
                        "Admin"});
            table2.AddRow(new string[] {
                        "2",
                        "Гость",
                        "Guest1Login",
                        "Guest1Pass",
                        "Guest"});
            table2.AddRow(new string[] {
                        "3",
                        "Пользователь",
                        "User1Login",
                        "User1Pass",
                        "User"});
            table2.AddRow(new string[] {
                        "4",
                        "Модератор",
                        "Mod1Login",
                        "Mod1Pass",
                        "Moderator"});
            table2.AddRow(new string[] {
                        "5",
                        "Тестировщик",
                        "Test1Login",
                        "Test1Pass",
                        "Tester"});
#line 14
  testRunner.And("the following users exists in the storage", ((string)(null)), table2, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get user with the specified identifier")]
        [Xunit.TraitAttribute("FeatureTitle", "Users")]
        [Xunit.TraitAttribute("Description", "Get user with the specified identifier")]
        [Xunit.InlineDataAttribute("1", "Admin1Login", new string[0])]
        [Xunit.InlineDataAttribute("2", "Guest1Login", new string[0])]
        [Xunit.InlineDataAttribute("3", "User1Login", new string[0])]
        [Xunit.InlineDataAttribute("4", "Mod1Login", new string[0])]
        [Xunit.InlineDataAttribute("5", "Test1Login", new string[0])]
        public void GetUserWithTheSpecifiedIdentifier(string ids, string logins, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ids", ids);
            argumentsOfScenario.Add("logins", logins);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get user with the specified identifier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 23
 testRunner.When(string.Format("I request user belonging to {0} Id", ids), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then(string.Format("the response Login is \'{0}\'", logins), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UsersFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UsersFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
